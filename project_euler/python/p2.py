#!/usr/bin/env python3
# -*- coding: utf-8 -*-

""" Problem 2 - Even Fibonacci numbers

    Each new term in the Fibonacci sequence is generated by adding the previous 
    two terms. By starting with 1 and 2, the first 10 terms will be:
    
        1, 2, 3, 5, 8, 13, 21, 34, 55, 89...
        
    By considering the terms in the Fibonacci sequence whose values do not 
    exceed four million, find the sum of the even-valued terms.
"""

def even_fib(m):
    if m < 3:    # 3 is the first even number.
        return 0
        
    s = 0
    temp = 0
    for i in range(3,m,3): # Every third number is a multiple of 2.
        temp = fib(i) # Prevent the last number from being added if >= m.
        if temp >= m:
            break
        s += temp

    return s
    
def fib(n):
    """ Use a recurrence formula to calculate the nth number. 
    
        If n is even then k = n/2
        F(n) = [2*F(k-1) + F(k)] * F(k)
        
        If n is odd then k = (n+1)/2
        F(n) = F(k)*F(k) + F(k-1)*F(k-1)
    """
    if n == 0:
        return 0
    if n == 1 or n == 2:
        return 1
        
    # Calculate f(k) and f(k-1) once for the equations.
    if n & 1 == 0:
        k = n // 2
    else:
        k = (n + 1) // 2
            
    fk = fib(k)
    fko = fib(k-1)
    
    if n & 1 == 0:
        return (2 * fko + fk) * fk
    return fk * fk + fko * fko
    
print("Result: " + str(even_fib(4000000))) # 4613732