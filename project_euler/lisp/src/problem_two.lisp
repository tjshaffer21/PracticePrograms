;;;; problem_two.lisp
;;;; Project Euler
;;;; Problem 2
;;;;
;;;; Each new term of the Fibonacci sequence is generated by adding the previous
;;;; two terms. By starting with 1 and 2, the first 10 terms will be:
;;;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;;;;
;;;; By considering the terms in the Fibonacci sequence whose values do not
;;;; exceed four million, find the sum of the even-valued terms.
;;;;
(in-package #:project-euler)

(defun fibonacci (term)
  "Calculate the fibonacci number of the given TERM.
 Args
   TERM - Interger value of the fibonacci number to calculate.
 Return
   Integer.
 Error
   If TERM < 0 then error is thrown."
  (declare (type integer term))
  (cond ((< term 0) (error "Incorrect term."))
        ((= term 0) 0)
        ((= term 1) 1)
        (t (+ (fibonacci (- term 2)) (fibonacci (1- term))))))

(defun problem-two ()
  (iterate::iter
    (iterate::for i iterate::initially 2 iterate::then (1+ i))
    (iterate::for fib iterate::initially (fibonacci 2)
                  iterate::then (fibonacci i))
    (iterate::while (< fib 4000000))
    (when (evenp fib)
      (iterate::summing fib))))

(defun problem-two-main()
  (format t "The sum of the even-valued terms of the Fibonacci sequence, whose \
values do not exceed four million is ~S" (problem-two)))
